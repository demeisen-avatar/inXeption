#!/usr/bin/env python3
'''
Module docstring (not a blueprint)
'''

'''
ðŸ’™1.0 FILE-LEVEL BLUEPRINT
This is a file-level blueprint that documents the architecture of the module.
It's not attached to any specific function or class, but provides context for the entire file.
'''


# Regular comment

# ðŸ”µ2.5 IMPLEMENTATION NOTE: This is a multi-line blueprint comment
# that continues for several lines and provides detailed
# implementation guidance that spans multiple lines.
# The extractor should capture all of these lines
# as a single blueprint comment block.


def regular_function(arg1, arg2):
    '''Regular docstring (not a blueprint)'''
    return arg1 + arg2


def blueprint_function(arg1, arg2):
    '''
    ðŸ’™2.1 FUNCTION-LEVEL BLUEPRINT
    This is a function-level blueprint that documents the architectural
    role of this specific function.
    '''
    return arg1 * arg2


class RegularClass:
    '''Regular class docstring (not a blueprint)'''

    def __init__(self):
        self.value = 42


class BlueprintClass:
    '''
    ðŸ’™3.0 CLASS-LEVEL BLUEPRINT
    This is a class-level blueprint that documents the architectural
    role of this specific class within the system.
    '''

    def __init__(self):
        self.value = 84

    def regular_method(self):
        '''Regular method docstring (not a blueprint)'''
        return self.value

    def blueprint_method(self):
        '''
        ðŸ’™3.1 METHOD-LEVEL BLUEPRINT
        This is a method-level blueprint that documents the architectural
        role of this specific method within the class.
        '''
        return self.value * 2

    def multiline_param_method(
        self,
        param1: str,
        param2: int,
        param3: dict,
        param4: list
    ):
        '''
        ðŸ’™3.2 MULTILINE-PARAMS METHOD BLUEPRINT
        This blueprint is attached to a method with multiline parameters.
        It tests whether our AST parser can correctly handle this case.
        '''
        return f"Testing multiline parameters with {param1}, {param2}, {param3}, {param4}"
